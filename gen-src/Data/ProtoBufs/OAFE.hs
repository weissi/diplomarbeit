{-# LANGUAGE BangPatterns, DeriveDataTypeable, FlexibleInstances, MultiParamTypeClasses #-}
module Data.ProtoBufs.OAFE (protoInfo, fileDescriptorProto) where
import Prelude ((+), (/))
import qualified Prelude as Prelude'
import qualified Data.Typeable as Prelude'
import qualified Data.Data as Prelude'
import qualified Text.ProtocolBuffers.Header as P'
import Text.DescriptorProtos.FileDescriptorProto (FileDescriptorProto)
import Text.ProtocolBuffers.Reflections (ProtoInfo)
import qualified Text.ProtocolBuffers.WireMessage as P' (wireGet,getFromBS)
 
protoInfo :: ProtoInfo
protoInfo
 = Prelude'.read
    "ProtoInfo {protoMod = ProtoName {protobufName = FIName \".OAFE\", haskellPrefix = [MName \"Data\",MName \"ProtoBufs\"], parentModule = [], baseName = MName \"OAFE\"}, protoFilePath = [\"Data\",\"ProtoBufs\",\"OAFE.hs\"], protoSource = \"OAFE.proto\", extensionKeys = fromList [], messages = [DescriptorInfo {descName = ProtoName {protobufName = FIName \".OAFE.OAFEConfig\", haskellPrefix = [MName \"Data\",MName \"ProtoBufs\"], parentModule = [MName \"OAFE\"], baseName = MName \"OAFEConfig\"}, descFilePath = [\"Data\",\"ProtoBufs\",\"OAFE\",\"OAFEConfig.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".OAFE.OAFEConfig.variable\", haskellPrefix' = [MName \"Data\",MName \"ProtoBufs\"], parentModule' = [MName \"OAFE\",MName \"OAFEConfig\"], baseName' = FName \"variable\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 10}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 9}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".OAFE.OAFEConfig.expressions\", haskellPrefix' = [MName \"Data\",MName \"ProtoBufs\"], parentModule' = [MName \"OAFE\",MName \"OAFEConfig\"], baseName' = FName \"expressions\"}, fieldNumber = FieldId {getFieldId = 2}, wireTag = WireTag {getWireTag = 18}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = True, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".OAFE.LinearExpr\", haskellPrefix = [MName \"Data\",MName \"ProtoBufs\"], parentModule = [MName \"OAFE\"], baseName = MName \"LinearExpr\"}), hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".OAFE.LinearExpr\", haskellPrefix = [MName \"Data\",MName \"ProtoBufs\"], parentModule = [MName \"OAFE\"], baseName = MName \"LinearExpr\"}, descFilePath = [\"Data\",\"ProtoBufs\",\"OAFE\",\"LinearExpr.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".OAFE.LinearExpr.scale\", haskellPrefix' = [MName \"Data\",MName \"ProtoBufs\"], parentModule' = [MName \"OAFE\",MName \"LinearExpr\"], baseName' = FName \"scale\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 10}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 12}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".OAFE.LinearExpr.intercept\", haskellPrefix' = [MName \"Data\",MName \"ProtoBufs\"], parentModule' = [MName \"OAFE\",MName \"LinearExpr\"], baseName' = FName \"intercept\"}, fieldNumber = FieldId {getFieldId = 2}, wireTag = WireTag {getWireTag = 18}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 12}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".OAFE.OAFEEvaluationRequest\", haskellPrefix = [MName \"Data\",MName \"ProtoBufs\"], parentModule = [MName \"OAFE\"], baseName = MName \"OAFEEvaluationRequest\"}, descFilePath = [\"Data\",\"ProtoBufs\",\"OAFE\",\"OAFEEvaluationRequest.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".OAFE.OAFEEvaluationRequest.variable\", haskellPrefix' = [MName \"Data\",MName \"ProtoBufs\"], parentModule' = [MName \"OAFE\",MName \"OAFEEvaluationRequest\"], baseName' = FName \"variable\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 10}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 9}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".OAFE.OAFEEvaluationRequest.value\", haskellPrefix' = [MName \"Data\",MName \"ProtoBufs\"], parentModule' = [MName \"OAFE\",MName \"OAFEEvaluationRequest\"], baseName' = FName \"value\"}, fieldNumber = FieldId {getFieldId = 2}, wireTag = WireTag {getWireTag = 18}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 12}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".OAFE.OAFEEvaluationResponse\", haskellPrefix = [MName \"Data\",MName \"ProtoBufs\"], parentModule = [MName \"OAFE\"], baseName = MName \"OAFEEvaluationResponse\"}, descFilePath = [\"Data\",\"ProtoBufs\",\"OAFE\",\"OAFEEvaluationResponse.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".OAFE.OAFEEvaluationResponse.variable\", haskellPrefix' = [MName \"Data\",MName \"ProtoBufs\"], parentModule' = [MName \"OAFE\",MName \"OAFEEvaluationResponse\"], baseName' = FName \"variable\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 10}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 9}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".OAFE.OAFEEvaluationResponse.values\", haskellPrefix' = [MName \"Data\",MName \"ProtoBufs\"], parentModule' = [MName \"OAFE\",MName \"OAFEEvaluationResponse\"], baseName' = FName \"values\"}, fieldNumber = FieldId {getFieldId = 2}, wireTag = WireTag {getWireTag = 18}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = True, mightPack = False, typeCode = FieldType {getFieldType = 12}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False}], enums = [], knownKeyMap = fromList []}"
 
fileDescriptorProto :: FileDescriptorProto
fileDescriptorProto
 = P'.getFromBS (P'.wireGet 11)
    (P'.pack
      "\249\SOH\n\nOAFE.proto\"E\n\nOAFEConfig\DC2\DLE\n\bvariable\CAN\SOH \STX(\t\DC2%\n\vexpressions\CAN\STX \ETX(\v2\DLE.OAFE.LinearExpr\".\n\nLinearExpr\DC2\r\n\ENQscale\CAN\SOH \STX(\f\DC2\DC1\n\tintercept\CAN\STX \STX(\f\"8\n\NAKOAFEEvaluationRequest\DC2\DLE\n\bvariable\CAN\SOH \STX(\t\DC2\r\n\ENQvalue\CAN\STX \STX(\f\":\n\SYNOAFEEvaluationResponse\DC2\DLE\n\bvariable\CAN\SOH \STX(\t\DC2\SO\n\ACKvalues\CAN\STX \ETX(\f")